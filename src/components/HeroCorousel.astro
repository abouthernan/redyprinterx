<section class="max-w-lg w-full h-full lg:order-2 z-[0] relative">
  <div class="embla hero">
    <div class="embla__viewport">
      <div class="embla__container">
        <div class="embla__slide">
          <img
            class="embla__slide__img"
            src="/hero.webp"
            alt="Your alt text"
          />
        </div>
        <div class="embla__slide">
          <img
            class="embla__slide__img"
            src="/equipos/FOTO-32.webp"
            alt="Your alt text"
          />
        </div>
        <div class="embla__slide">
          <img
            class="embla__slide__img"
            src="/equipos/FOTO-31.webp"
            alt="Your alt text"
          />
        </div>
      </div>
    </div>

    <div class="embla__dots"></div>
  </div>
</section>

<style is:global>
  .embla.hero {
    --slide-spacing: 1rem;
    --slide-size: 100%;
    --slide-height: 100%;
    padding: 1.6rem;
  }
  .embla.hero .embla__viewport {
    overflow: hidden;
  }
  .embla.hero .embla__container {
    backface-visibility: hidden;
    display: flex;
    touch-action: pan-y;
    margin-left: calc(var(--slide-spacing) * -1);
  }
  .embla.hero .embla__slide {
    flex: 0 0 var(--slide-size);
    min-width: 0;
    padding-left: var(--slide-spacing);
    position: relative;
  }
  .embla.hero .embla__slide__img {
    display: block;
    height: var(--slide-height);
    width: 100%;
    object-fit: contain;
    aspect-ratio: 1/1;
  }
    .embla.hero .embla__dot {
    -webkit-appearance: none;
    background-color: transparent;
    touch-action: manipulation;
    display: inline-flex;
    text-decoration: none;
    cursor: pointer;
    border: 0;
    padding: 0;
    margin: 0;
  }
  .embla.hero .embla__dots {
    z-index: 1;
    bottom: -1.4rem;
    position: absolute;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .embla.hero .embla__dot {
    width: 2.4rem;
    height: 2.4rem;
    display: flex;
    align-items: center;
    margin-right: 0.75rem;
    margin-left: 0.75rem;
  }
  .embla.hero .embla__dot:after {
    background: #000;
    border-radius: 0.2rem;
    width: 100%;
    height: 0.3rem;
    content: '';
  }
  .embla.hero .embla__dot--selected:after {
    background: linear-gradient(
      45deg,
      rgb(138, 180, 248),
      rgb(193, 168, 226)
    );
  }
</style>

<script>
import EmblaCarousel from 'embla-carousel'
import Autoplay from 'embla-carousel-autoplay'

const OPTIONS = { loop: true }

const emblaNode = document.querySelector('.embla.hero')
const viewportNode = emblaNode.querySelector('.embla__viewport')
const dotsNode = document.querySelector('.embla__dots')
const emblaApi = EmblaCarousel(viewportNode, OPTIONS, [Autoplay()])

export const addDotBtnsAndClickHandlers = (
  emblaApi,
  dotsNode,
  onButtonClick
) => {
  let dotNodes = []

  const addDotBtnsWithClickHandlers = () => {
    dotsNode.innerHTML = emblaApi
      .scrollSnapList()
      .map(() => '<button class="embla__dot" type="button"></button>')
      .join('')

    const scrollTo = (index) => {
      emblaApi.scrollTo(index)
      if (onButtonClick) onButtonClick(emblaApi)
    }

    dotNodes = Array.from(dotsNode.querySelectorAll('.embla__dot'))
    dotNodes.forEach((dotNode, index) => {
      dotNode.addEventListener('click', () => scrollTo(index), false)
    })
  }

  const toggleDotBtnsActive = () => {
    const previous = emblaApi.previousScrollSnap()
    const selected = emblaApi.selectedScrollSnap()
    dotNodes[previous].classList.remove('embla__dot--selected')
    dotNodes[selected].classList.add('embla__dot--selected')
  }

  emblaApi
    .on('init', addDotBtnsWithClickHandlers)
    .on('reInit', addDotBtnsWithClickHandlers)
    .on('init', toggleDotBtnsActive)
    .on('reInit', toggleDotBtnsActive)
    .on('select', toggleDotBtnsActive)

  return () => {
    dotsNode.innerHTML = ''
  }
}


const onButtonClick = (emblaApi) => {
  const { autoplay } = emblaApi.plugins()
  if (!autoplay) return
  if (autoplay.options.stopOnInteraction !== false) autoplay.stop()
}

const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(
  emblaApi,
  dotsNode,
  onButtonClick
)

emblaApi.on('destroy', removeDotBtnsAndClickHandlers)

</script>

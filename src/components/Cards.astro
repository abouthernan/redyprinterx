---
const services = [
  {
    name: 'Compromiso',
    icon: '/hand.svg'
  },
  {
    name: 'Trabajo en equipo',
    icon: '/users.svg'
  },
  {
    name: 'Pasión',
    icon: '/like.svg'
  },
  {
    name: 'Innovación',
    icon: '/light.svg'
  },
  {
    name: 'Respeto',
    icon: '/flag.svg'
  }
]
---

<section
  class="bg-marino py-10 container mx-auto rounded-3xl mt-10 px-2 md:px-12 text-center lg:text-left md:min-h-[500px] md:grid md:place-content-center"
  id="cards"
>
  <h3 class="text-[clamp(1.8rem,8vw,3rem)] font-medium text-white">
    Nuestros valores
  </h3>
  <div
    class="grid lg:max-w-7xl mt-12 gap-5 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 place-items-center justify-center mx-auto w-full max-w-full"
  >
    {
      services.map(({ name, icon }) => (
        <div class="relative flex space-y-4 items-center flex-col border border-blanco p-4 rounded-md text-blanco min-w-[200px]">
          <img class="left-0 w-12 h-12 object-contain" src={icon} alt={name} />
          <h2 class="font-bold text-md">{name}</h2>
        </div>
      ))
    }
  </div>
</section>

<script lang="javascript">
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.getElementById('cards')
    const cardsItem = document.querySelectorAll('.card')

    const callback = (entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.remove('opacity-0')
          entry.target.classList.add(
            'animate-in',
            'slide-in-from-bottom-3',
            'duration-1000',
            'opacity-100'
          )
          observer.unobserve(entry.target) // Dejar de observar el elemento una vez agregada la clase
        }
      })
    }

    const callback2 = (entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add(
            'animate-in',
            'slide-in-from-bottom-10',
            'duration-1000',
            'opacity-100'
          )
          observer.unobserve(entry.target) // Dejar de observar el elemento una vez agregada la clase
        }
      })
    }

    const observer = new IntersectionObserver(callback)
    observer.observe(cards)

    const observer2 = new IntersectionObserver(callback2)
    cardsItem.forEach(item => {
      observer2.observe(item)
    })
  })
</script>

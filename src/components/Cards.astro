---
const services = [
 'Compromiso',
 'Puntualidad',
 'Responsabilidad',
 'Honestidad',
 'Trabajo en equipo',
]
---

<section
  class="bg-blanco py-10 container mx-auto rounded-3xl mt-10 px-2 md:px-12 text-center lg:text-left"
  id="cards"
>
  <h3 class="text-[clamp(1.8rem,8vw,3rem)] font-medium text-marino">
    Nuestros valores
  </h3>
  <div
    class="grid max-w-7xl mt-12 gap-5 grid-cols-[repeat(auto-fit,minmax(230px,1fr))] place-items-center mx-auto"
  >
    {services.map( item => (
      <div
        class="border text-center border-marino text-marino px-4 py-6 rounded-2xl w-[230px] card opacity-0 delay-100 transition-all"
      >
        <h4 class="font-medium text-xl">{item}</h4>
      </div>
    ))}
  </div>
</section>

<script lang="javascript">
document.addEventListener('DOMContentLoaded', () => {
  const cards = document.getElementById('cards')
  const cardsItem = document.querySelectorAll('.card')

  const callback = (entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.remove('opacity-0')
        entry.target.classList.add(
          'animate-in',
          'slide-in-from-bottom-3',
          'duration-1000',
          'opacity-100'
        )
        observer.unobserve(entry.target) // Dejar de observar el elemento una vez agregada la clase
      }
    })
  }

  const callback2 = (entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add(
          'animate-in',
          'slide-in-from-bottom-10',
          'duration-1000',
          'opacity-100'
        )
        observer.unobserve(entry.target) // Dejar de observar el elemento una vez agregada la clase
      }
    })
  }

  const observer = new IntersectionObserver(callback)
  observer.observe(cards)

  const observer2 = new IntersectionObserver(callback2)
  cardsItem.forEach(item => {
    observer2.observe(item)
  })
})
</script>
